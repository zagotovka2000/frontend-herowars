// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_BASE_URL = 'http://localhost:3000';
const USE_MOCK_DATA = true;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let userData = null;
let heroes = [];
let selectedTeam = [];
let tg = null;
let currentSlotPosition = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
function initTelegramApp() {
    try {
        if (typeof Telegram === 'undefined' || !Telegram.WebApp) {
            console.warn('Telegram Web App –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –±—Ä–∞—É–∑–µ—Ä–∞.');
            tg = {
                ready: () => {},
                expand: () => {},
                setHeaderColor: () => {},
                setBackgroundColor: () => {},
                initDataUnsafe: { 
                    user: { 
                        id: Math.floor(Math.random() * 100000), 
                        first_name: 'TestUser',
                        username: 'test_user'
                    } 
                },
                sendData: (data) => console.log('Send data:', data)
            };
        } else {
            tg = Telegram.WebApp;
            tg.ready();
            tg.expand();
            tg.setHeaderColor('#2c3e50');
            tg.setBackgroundColor('#667eea');
        }
        
        console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        loadGameData();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        loadGameData();
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
async function loadGameData() {
    try {
        const tgUser = tg?.initDataUnsafe?.user;
        
        if (!tgUser || USE_MOCK_DATA) {
            await loadMockData();
            return;
        }

        const response = await fetch(`${API_BASE_URL}/api/game-data`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
                telegramId: tgUser?.id 
            })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        
        if (data.error) {
            throw new Error(data.error);
        }

        userData = data.user;
        heroes = data.heroes || [];
        
        renderUserInfo();
        renderHeroes();
        renderTeamBuilder();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        await loadMockData();
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function loadMockData() {
    try {
        document.getElementById('user-info').innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...</div>';
        
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        userData = {
            id: 1,
            level: 5,
            gold: 1500,
            gems: 25,
            experience: 1200,
            maxExperience: 2000
        };
        
        heroes = [
            {
                id: 1,
                name: "–°—Ç–∞–ª—å–Ω–æ–π –†—ã—Ü–∞—Ä—å",
                level: 3,
                health: 150,
                attack: 25,
                defense: 15,
                speed: 8,
                criticalChance: 0.15,
                criticalDamage: 1.8,
                element: "fire"
            },
            {
                id: 2,
                name: "–õ–µ—Å–Ω–æ–π –õ—É—á–Ω–∏–∫",
                level: 2,
                health: 90,
                attack: 35,
                defense: 8,
                speed: 12,
                criticalChance: 0.25,
                criticalDamage: 2.2,
                element: "nature"
            },
            {
                id: 3,
                name: "–ú–∞–≥ –û–≥–Ω—è",
                level: 4,
                health: 80,
                attack: 45,
                defense: 5,
                speed: 10,
                criticalChance: 0.20,
                criticalDamage: 2.5,
                element: "fire"
            },
            {
                id: 4,
                name: "–ú–æ—Ä—Å–∫–∞—è –í–æ–ª–Ω–∞",
                level: 3,
                health: 110,
                attack: 30,
                defense: 12,
                speed: 9,
                criticalChance: 0.18,
                criticalDamage: 2.0,
                element: "water"
            },
            {
                id: 5,
                name: "–ì–æ—Ä–Ω—ã–π –ì–∏–≥–∞–Ω—Ç",
                level: 5,
                health: 200,
                attack: 20,
                defense: 25,
                speed: 5,
                criticalChance: 0.10,
                criticalDamage: 1.5,
                element: "earth"
            }
        ];
        
        renderUserInfo();
        renderHeroes();
        renderTeamBuilder();
        
        console.log('–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        document.getElementById('user-info').innerHTML = 
            '<div class="error">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</div>';
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
function renderUserInfo() {
    if (!userData) return;
    
    const experiencePercent = (userData.experience / userData.maxExperience) * 100;
    
    document.getElementById('user-info').innerHTML = `
        <div class="stat">
            <div>üèÜ –£—Ä–æ–≤–µ–Ω—å</div>
            <div class="stat-value">${userData.level}</div>
        </div>
        <div class="stat">
            <div>üí∞ –ó–æ–ª–æ—Ç–æ</div>
            <div class="stat-value">${userData.gold}</div>
        </div>
        <div class="stat">
            <div>üíé –°–∞–º–æ—Ü–≤–µ—Ç—ã</div>
            <div class="stat-value">${userData.gems}</div>
        </div>
        <div class="stat">
            <div>üéØ –ì–µ—Ä–æ–µ–≤</div>
            <div class="stat-value">${heroes.length}</div>
        </div>
    `;
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–µ—Ä–æ–µ–≤
function renderHeroes() {
    const container = document.getElementById('heroes-list');
    
    if (!heroes || heroes.length === 0) {
        container.innerHTML = '<div class="error">‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≥–µ—Ä–æ–µ–≤</div>';
        return;
    }

    container.innerHTML = heroes.map(hero => `
        <div class="hero-card">
            <h3>${hero.name} (–£—Ä. ${hero.level})</h3>
            <div class="hero-stats">
                <div class="stat-item">‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: ${hero.health}</div>
                <div class="stat-item">‚öîÔ∏è –ê—Ç–∞–∫–∞: ${hero.attack}</div>
                <div class="stat-item">üõ°Ô∏è –ó–∞—â–∏—Ç–∞: ${hero.defense}</div>
                <div class="stat-item">üèÉ –°–∫–æ—Ä–æ—Å—Ç—å: ${hero.speed}</div>
                <div class="stat-item">üéØ –ö—Ä–∏—Ç: ${(hero.criticalChance * 100).toFixed(1)}%</div>
                <div class="stat-item">üí• –£—Ä–æ–Ω –∫—Ä–∏—Ç–∞: ${hero.criticalDamage.toFixed(1)}x</div>
            </div>
            <button class="upgrade-btn" 
                    onclick="upgradeHero(${hero.id})"
                    ${userData.gold < hero.level * 100 ? 'disabled' : ''}>
                üöÄ –£–ª—É—á—à–∏—Ç—å (${hero.level * 100} –∑–æ–ª–æ—Ç–∞)
            </button>
        </div>
    `).join('');
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
function renderTeamBuilder() {
    const teamBuilder = document.getElementById('team-builder');
    if (!teamBuilder) return;
    
    teamBuilder.innerHTML = '';
    for (let i = 1; i <= 5; i++) {
        const slot = document.createElement('div');
        slot.className = 'team-slot';
        slot.setAttribute('data-position', i);
        slot.innerHTML = `–ü–æ–∑–∏—Ü–∏—è ${i}`;
        slot.onclick = () => selectHeroForSlot(i);
        teamBuilder.appendChild(slot);
    }
}

// –í—ã–±–æ—Ä –≥–µ—Ä–æ—è –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–æ–º–∞–Ω–¥–µ
function selectHeroForSlot(position) {
    currentSlotPosition = position;
    showHeroSelectionModal();
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –≥–µ—Ä–æ—è
function showHeroSelectionModal() {
    const modal = document.createElement('div');
    modal.className = 'hero-select-modal';
    modal.innerHTML = `
        <div class="hero-select-content">
            <h3>–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ—Ä–æ—è –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ ${currentSlotPosition}</h3>
            <div id="hero-options">
                ${heroes.map(hero => `
                    <div class="hero-option" onclick="addHeroToTeam(${hero.id})">
                        <strong>${hero.name}</strong> (–£—Ä. ${hero.level})<br>
                        <small>‚ù§Ô∏è ${hero.health} | ‚öîÔ∏è ${hero.attack} | üõ°Ô∏è ${hero.defense}</small>
                    </div>
                `).join('')}
            </div>
            <button class="close-modal" onclick="closeHeroSelectionModal()">–ó–∞–∫—Ä—ã—Ç—å</button>
        </div>
    `;
    document.body.appendChild(modal);
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –≥–µ—Ä–æ—è
function closeHeroSelectionModal() {
    const modal = document.querySelector('.hero-select-modal');
    if (modal) {
        modal.remove();
    }
    currentSlotPosition = null;
}

// –î–æ–±–∞–≤–∏—Ç—å –≥–µ—Ä–æ—è –≤ –∫–æ–º–∞–Ω–¥—É
function addHeroToTeam(heroId) {
    const hero = heroes.find(h => h.id === heroId);
    if (!hero) return;
    
    selectedTeam[currentSlotPosition - 1] = heroId;
    
    const slot = document.querySelector(`[data-position="${currentSlotPosition}"]`);
    slot.innerHTML = `
        <strong>${hero.name}</strong><br>
        <small>–£—Ä. ${hero.level}</small>
    `;
    slot.classList.add('filled');
    
    closeHeroSelectionModal();
    showMessage('–ì–µ—Ä–æ–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É!', 'success');
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
function showMessage(text, type = 'info') {
    const messageDiv = document.createElement('div');
    messageDiv.className = type === 'error' ? 'error' : 'success';
    messageDiv.textContent = text;
    
    document.body.appendChild(messageDiv);
    
    setTimeout(() => {
        messageDiv.remove();
    }, 3000);
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function showTab(tabName) {
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.style.display = 'none';
    });
    
    document.querySelectorAll('.tab-button').forEach(button => {
        button.classList.remove('active');
    });
    
    document.getElementById(`${tabName}-tab`).style.display = 'block';
    event.target.classList.add('active');
}

// –£–ª—É—á—à–µ–Ω–∏–µ –≥–µ—Ä–æ—è
async function upgradeHero(heroId) {
    try {
        const hero = heroes.find(h => h.id === heroId);
        if (!hero) {
            showMessage('–ì–µ—Ä–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
            return;
        }

        const upgradeCost = hero.level * 100;
        if (userData.gold < upgradeCost) {
            showMessage(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞! –ù—É–∂–Ω–æ: ${upgradeCost}`, 'error');
            return;
        }

        if (tg && tg.sendData) {
            tg.sendData(JSON.stringify({
                action: 'upgrade_hero',
                heroId: heroId,
                userId: userData.id
            }));
            showMessage('–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', 'success');
        } else {
            // –ò–º–∏—Ç–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            userData.gold -= upgradeCost;
            hero.level += 1;
            hero.health += 10;
            hero.attack += 5;
            hero.defense += 2;
            
            renderUserInfo();
            renderHeroes();
            showMessage(`${hero.name} —É–ª—É—á—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è ${hero.level}!`, 'success');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –≥–µ—Ä–æ—è:', error);
        showMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –≥–µ—Ä–æ—è: ' + error.message, 'error');
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
async function saveTeam() {
    try {
        const filledSlots = selectedTeam.filter(id => id !== undefined);
        
        if (filledSlots.length === 0) {
            showMessage('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –≥–µ—Ä–æ—è –≤ –∫–æ–º–∞–Ω–¥—É!', 'error');
            return;
        }

        if (tg && tg.sendData) {
            tg.sendData(JSON.stringify({
                action: 'save_team',
                team: selectedTeam,
                userId: userData.id
            }));
            showMessage('–ö–æ–º–∞–Ω–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!', 'success');
        } else {
            // –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            showMessage('–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!', 'success');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:', error);
        showMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã', 'error');
    }
}

// –ü–æ–∏—Å–∫ –±–∏—Ç–≤—ã
async function findBattle() {
    const battleResult = document.getElementById('battle-result');
    battleResult.innerHTML = '<div class="loading">üîç –ü–æ–∏—Å–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...</div>';
    
    try {
        setTimeout(() => {
            battleResult.innerHTML = `
                <div class="error">
                    ‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –±–∏—Ç–≤ —á–µ—Ä–µ–∑ Web App –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.<br>
                    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /battle –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —á–∞—Ç–µ –±–æ—Ç–∞.
                </div>
            `;
        }, 2000);
        
    } catch (error) {
        battleResult.innerHTML = `<div class="error">‚ùå –û—à–∏–±–∫–∞: ${error.message}</div>`;
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞
function handleBotMessage(data) {
    console.log('Received data from bot:', data);
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏—à–µ–¥—à–∏—Ö –æ—Ç –±–æ—Ç–∞
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    initTelegramApp();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram Web App
if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
    Telegram.WebApp.onEvent('webAppDataReceived', (event) => {
        try {
            const data = JSON.parse(event.data);
            handleBotMessage(data);
        } catch (error) {
            console.error('Error parsing web app data:', error);
        }
    });
}
